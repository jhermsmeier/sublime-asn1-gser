%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: ASN.1 GSER
file_extensions: [ asn, asn1, my ]
scope: source.asn1.gser

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: keywords
    - include: numbers
    - include: strings
    - include: punctuation

  keywords:
    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.

    # Keywords
    - match: '\b(IMPORTS|OBJECT-TYPE|FROM|SYNTAX|ACCESS|STATUS|DESCRIPTION|INDEX|DEFVAL|SIZE|DEFINITIONS|BEGIN)\b'
      scope: keyword.control.gser
    # Types
    - match: '\b(BIT STRING|BOOLEAN|ENUMERATED|INTEGER|NULL|OBJECT IDENTIFIER|RELATIVE-OID|OCTET STRING|CHOICE|SEQUENCE OF|SET OF|SEQUENCE|SET|CHARACTER STRING|EMBEDDED PDV|EXTERNAL|INSTANCE OF|REAL)\b'
      scope: storage.type.gser

  # TODO: This doesn't appear to work?
  punctuation:
    - match: '::=|\{|\}|\(|\)'
      scope: punctuation.definition.generic.asn1.gser

  numbers:
    # INTEGER / floating point REALs
    # TODO: Fix partial integer-in-word highlighting (i.e. in `FROM RFC-1212;`)
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.asn1.gser
    # Hexadecimal bit string
    - match: '''[0-9A-F]+''H'
      scope: constant.numeric.asn1.gser
    # Binary bit string
    - match: '''[01]+''B'
      scope: constant.numeric.asn1.gser
    # Language constants
    - match: '\b(PLUS-INFINITY|MINUS-INFINITY|NULL)\b'
      scope: constant.language.asn1.gser
    # REAL w/ mantissa + exponent
    - match: '\b([0-9]+(\.[0-9]+)?(E(-)?[1-9][0-9]+)?)\b'
      scope: constant.numeric.asn1.gser
    # OIDs
    - match: '{(\s(\d+|([a-z][a-zA-Z0-9]*(\-[a-zA-Z0-9])*)))+\s}'
      scope: constant.numeric.asn1.gser

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character.
    - match: '"'
      scope: punctuation.definition.string.begin.asn1.gser
      push: inside_string

  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.asn1.gser
    - match: '\.'
      scope: constant.character.escape.asn1.gser
    - match: '"'
      scope: punctuation.definition.string.end.asn1.gser
      pop: true

  comments:
    # Comments begin with a '--' and finish at the end of the line.
    - match: '--'
      scope: punctuation.definition.comment.asn1.gser
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash.asn1.gser
        - match: $\n?
          pop: true
